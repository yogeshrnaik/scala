import fp.chapter3.datastructures._
import fp.chapter3.datastructures.list.Cons
import fp.chapter3.datastructures.list.List._
println("**************************************************")
println("******** Defining lists of various datatypes ********")
val ex1: list.List[Double] = list.Nil
val ex2: list.List[Int] = Cons(1, list.Nil)
val ex3: list.List[String] = Cons("a", Cons("b", list.Nil))
println(ex1)
println(ex2)
println(ex3)
println("**************************************************")
println("******** sum and product of lists ********")
println(sum(list.List(1, 2)))
println(product(list.List(1, 2)))
println(product(list.List(2, 0, 10, 12)))
println(product(list.List(10, 12)))
println("**************************************************")
println("******** EXERCISE 3.1 ********")
/**
 * EXERCISE 3.1
 * What will be the result of the following match expression?
 */
val x = list.List(1, 2, 3, 4, 5) match {
  case Cons(x, Cons(2, Cons(4, _))) => x
  case list.Nil => 42
  case Cons(x, Cons(y, Cons(3, Cons(4, _)))) => x + y
  case Cons(h, t) => h + sum(t)
  case _ => 101
}
println("**************************************************")
println("************* Tail function on list *************")
println(tail(list.List(1, 4, 6)))
println(tail(list.List()))
println("**************************************************")
println("************* Set Head function on list *************")
println(setHead(1, list.List(2, 8, 9)))
//println(setHead(2, List())) // java.lang.RuntimeException: setHead on empty list
println("**************************************************")
println("************* drop functions on list *************")
println(drop(list.List(1, 2, 3), 2))
println(drop(list.List(1, 2, 3), -10))
println(drop(list.List(1, 2, 3), 10))
println(dropWithPatternMatch(list.List(38, 989, 10), 2))
println(dropWhile(list.List(1, 2, 3, 10, 5, 6))(x => x < 5))
println("**************************************************")
println("************* init function on list *************")
println(init(list.List(1, 2)))
println(init(list.List(1)))
println(init(list.List(1, 2, 3, 4)))
println("**************************************************")
println("************* init tail recursive *************")
println(initTailRecWithListReverse(list.List(1), list.List()))
println(initTailRecWithListReverse(list.List(1, 2), list.List()))
println(initTailRecWithListReverse(list.List(1, 2, 3), list.List()))
println("**************************************************")
println("************* sum and product with Fold Right *************")
println(sumWithFoldRight(list.List(1, 2, 3, 4, 5)))
println(productWithFoldRight(list.List(1, 2, 3)))
println("**************************************************")
println("************* EXERCISE 3.8 *************")
/**
 * EXERCISE 3.8
 * See what happens when you pass Nil and Cons themselves to foldRight, like this:
 * foldRight(List(1,2,3), Nil:List[Int])(Cons(_,_)).10 What do you think this
 * says about the relationship between foldRight and the data constructors of List?
 * ANSWER = Cons(1,Cons(2,Cons(3,Nil)))
 */
println(foldRight(list.List(1, 2, 3), list.Nil: list.List[Int])(Cons(_, _)))
println("**************************************************")
println("************* sum and product with Fold Left *************")
println(sumWithFoldLeft(list.List(1, 2, 3, 4, 5)))
println(productWithFoldLeft(list.List(1, 2, 3, 4, 5)))
println(lengthWithFoldLeft(list.List(1, 2, 3, 4, 5)))
println("**************************************************")
println("************* reverse a list *************")
println(reverse(list.List(1, 2, 3)))
println(reverse(list.List(1)))
println(reverse(list.List()))
println("**************************************************")
println("************* append one list to another using fold right *************")
println(appendWithFold(list.List(1, 2), list.List(2, 3)))
println("**************************************************")
println("************* concat lists of list into a single list *************")
println(concat(list.List(list.List(1, 2), list.List(3, 4))))
println("**************************************************")
println("************* add one to each item in list *************")
println(addOne(list.Nil))
println(addOne(list.List(1)))
println(addOne(list.List(1, 2, 3)))
println("**************************************************")
println("************* Double List to String List *************")
println(doubleListToStringList(list.List(1.32, 93.3, 5.02)))
println("**************************************************")
println("************* Map *************")
println(map(list.List(3, 2, 1))(a => a - 1))
println(map(list.List(): list.List[Int])(a => a + 10))
println("**************************************************")
println("************* Filter *************")
println(filter(list.List(1, 2, 3, 4, 5, 6, 7))(a => a % 2 == 0))
println(filter(list.List(1, 2, 3, 4, 5, 6, 7))(a => a % 2 != 0))
println("**************************************************")
println("************* flatMap *************")
println(flatMapWithFoldRight(list.List(1, 2, 3))(i => list.List(i, i)))
println(flatMapWithConcat(list.List(1, 2, 3))(i => list.List(i, 0, i)))
println("**************************************************")
println("************* filter with flatMap *************")
println(filterWithFlatMap(list.List(10, 11, 12, 3, 4))(a => a <= 10))
println("**************************************************")
println("************* addPairs *************")
println(addPairs(list.List(1, 2, 3), list.List(9, 8, 7)))
println("**************************************************")
println("************* zipWith *************")
println(zipWith(list.List(1, 2), list.List(-11.0, -12.0))((a, b) => a + b))
println("**************************************************")
println("************* take *************")
println(take(list.List(1, 2, 3), 2))
println(take(list.List(1, 2, 3), 0))
println(take(list.List(1, 2, 3), -2))
println(take(list.List(1, 2, 3, 4), 10))
println("**************************************************")
println("************* takeWhile *************")
println(takeWhile(list.List(29, 31, 33, 34))(x => x % 2 != 0))
println(takeWhile(list.List(29, 31, 33, 34))(x => x % 2 == 0))
println("**************************************************")
println("************* forall *************")
println(forall(list.List(1, 2, 3))(a => a < 10))
println(forall(list.List(1, 2, 3))(a => a > 10))
println("**************************************************")
println("************* exists *************")
println(exists(list.List(1, 2, 3))(a => a == 2))
println(exists(list.List(1, 2, 3))(a => a > 10))
println("**************************************************")
println("************* hasSubsequence *************")
println(hasSubsequence(list.List(1,2,3,4), list.List(2,3)))
println(hasSubsequence(list.List(1,2,3,4), list.List(1,2,3,4)))
println(hasSubsequence(list.List(1,2,3,4), list.List(2,4,3)))
println("**************************************************")