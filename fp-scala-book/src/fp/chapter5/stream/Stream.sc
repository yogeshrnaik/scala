import fp.chapter5.stream.Stream

println("**************************************************")
println("******** Stream toList ********")
println(Stream(1, 2, 3).toList)
println("**************************************************")
println("******** Stream take ********")
println(Stream(1, 2, 3, 4, 5).take(4).toList)
println(Stream(1, 2, 3, 4, 5).take(-4).toList)
println("**************************************************")
println("******** Stream drop ********")
println(Stream(1, 2, 3, 4, 5).drop(4).toList)
println(Stream(1, 2, 3, 4, 5).drop(2).toList)
println(Stream(1, 2, 3, 4, 5).drop(0).toList)
println(Stream(1, 2, 3, 4, 5).drop(-1).toList)
println("**************************************************")
println("******** Stream takeWhile ********")
println(Stream(73, 93, 1, 290, 69, 21).takeWhile(a => a < 100).toList)
println(Stream(73, 93, 1, 290, 69, 21).takeWhile(a => a > 100).toList)
println("**************************************************")
println("******** Stream exists ********")
println(Stream(73, 93, 1, 290, 69, 21).exists(a => a > 100))
println(Stream(73, 93, 1, 290, 69, 21).exists(a => a < 0))
println("**************************************************")
println("******** Stream forall ********")
println(Stream(73, 93, 1, 290, 69, 21).forAll(a => a > 0))
println(Stream(73, 93, 1, 290, 69, 21).forAll(a => a > 10))
println("**************************************************")
println("******** Stream takeWhileWithFoldRight ********")
println(Stream(73, 93, 1, 290, 69, 21).takeWhileWithFoldRight(a => a < 100).toList)
println(Stream(73, 93, 1, -10, 69, 21).takeWhileWithFoldRight(a => a > 0).toList)
println("**************************************************")
println("******** Stream headOptionWithFoldRight ********")
println(Stream(1, 2, 3, 4, 5).headOptionWithFoldRight)
println(Stream().headOptionWithFoldRight)
println("**************************************************")
println("************* Stream map/filter/append/flatMap *************")
println(Stream(1, 2, 3).map(a => "PREFIX_" + a.toString + "_SUFFIX").toList)
println("**************************************************")
println(Stream(1, 2, 3).filter(a => a < 3).toList)
println(Stream(1, 2, 3, 4).filter(a => a > 3).toList)
println(Stream(1, 2, 3, 4).filter(a => a == 10).toList)
println("**************************************************")
println(Stream(1, 2).append(Stream(3, 4)).toList)
println(Stream(1, 2).append(Stream()).toList)
println(Stream().append(Stream(3, 4)).toList)
println("**************************************************")
println(Stream(1, 2, 3, 4).flatMap((i => Stream(i+10))).toList)
println(Stream(1, 2, 3, 4).flatMap((i => Stream("PREFIX_"+ i.toString))).toList)
println("**************************************************")
println("************* Stream constant/from *************")
println(Stream.constant(10).take(5).toList)
println(Stream.from(10).take(5).toList)
println("**************************************************")
println("************* Stream fibonacci *************")
println(Stream.fibs().take(15).toList)
println("**************************************************")
println("****** fibs, from, constant, and ones in terms of unfold ******")
println(Stream.fibsWithUnfold().take(10).toList)
println(Stream.fromWithUnfold(9).take(5).toList)
println(Stream.constantWithUnfold(7).take(5).toList)
println(Stream.onesWithUnfold.take(5).toList)
println("**************************************************")